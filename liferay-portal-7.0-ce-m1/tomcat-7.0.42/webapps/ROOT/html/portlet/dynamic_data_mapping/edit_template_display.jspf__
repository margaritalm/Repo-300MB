 package PackageNo1118127494; public class edit_template_display_jspf {  /* 1 */ private String _getAccessor(String accessor, String language) { /* 467 */ 	if (StringUtil.equalsIgnoreCase(language, "vm")) { /* 468 */ 		if (!accessor.contains(StringPool.OPEN_PARENTHESIS)) { /* 469 */ 			return accessor; /* 470 */ 		} /* 471 */ 		StringTokenizer st = new StringTokenizer(accessor, "(,"); /* 473 */ 		StringBundler sb = new StringBundler(st.countTokens() * 2); /* 475 */ 		sb.append(st.nextToken()); /* 477 */ 		sb.append(StringPool.OPEN_PARENTHESIS); /* 478 */ 		while (st.hasMoreTokens()) { /* 480 */ 			sb.append(StringPool.DOLLAR); /* 481 */ 			sb.append(st.nextToken()); /* 482 */ 		} /* 483 */ 		accessor = sb.toString(); /* 485 */ 	} /* 486 */ 	return accessor; /* 488 */ } /* 489 */ private String[] _getDataContentArray(TemplateVariableDefinition templateVariableDefinition, String language) { /* 491 */ 	String[] dataContentArray = new String[] {StringPool.BLANK, StringPool.BLANK, StringPool.BLANK}; /* 492 */ 	String dataType = templateVariableDefinition.getDataType(); /* 494 */ 	if (templateVariableDefinition.isCollection()) { /* 496 */ 		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition(); /* 497 */ 		String[] listCodeArray = _getListCodeArray(templateVariableDefinition.getName(), itemTemplateVariableDefinition.getName(), itemTemplateVariableDefinition.getAccessor(), language); /* 499 */ 		dataContentArray[0] = listCodeArray[0]; /* 501 */ 		dataContentArray[1] = listCodeArray[1]; /* 502 */ 	} /* 503 */ 	else if (Validator.isNull(dataType)) { /* 504 */ 		dataContentArray[0] = _getVariableReferenceCode(templateVariableDefinition.getName(), templateVariableDefinition.getAccessor(), language); /* 505 */ 	} /* 506 */ 	else if (dataType.equals("service-locator")) { /* 507 */ 		Class<?> templateVariableDefinitionClass = templateVariableDefinition.getClazz(); /* 508 */ 		String variableName = templateVariableDefinitionClass.getSimpleName(); /* 510 */ 		dataContentArray[0] = _getVariableAssignmentCode(variableName, "serviceLocator.findService(\"" + templateVariableDefinition.getName() + "\")", language); /* 512 */ 		dataContentArray[1] = _getVariableReferenceCode(variableName, null, language); /* 513 */ 	} /* 514 */ 	else { /* 515 */ 		try { /* 516 */ 			dataContentArray = templateVariableDefinition.generateCode(language); /* 517 */ 		} /* 518 */ 		catch (Exception e) { /* 519 */ 			_log.error(e, e); /* 520 */ 		} /* 521 */ 	} /* 522 */ 	return dataContentArray; /* 524 */ } /* 525 */ private String[] _getListCodeArray( /* 527 */ 	String variableName, String itemName, String accessor, String language) { /* 528 */ 	String[] listCodeArray = new String[2]; /* 529 */ 	if (StringUtil.equalsIgnoreCase(language, "ftl")) { /* 531 */ 		listCodeArray[0] = "<#if " + variableName + "?has_content>\n\t<#list " + variableName + " as " + itemName + ">\n\t\t" + _getVariableReferenceCode(itemName, accessor, language); /* 532 */ 		listCodeArray[1] = "\n\t</#list>\n</#if>"; /* 533 */ 	} /* 534 */ 	else if (StringUtil.equalsIgnoreCase(language, "vm")) { /* 535 */ 		listCodeArray[0] = "#if (!$"+ variableName + ".isEmpty())\n\t#foreach ($" + itemName + " in $" + variableName + ")\n\t\t" + _getVariableReferenceCode(itemName, accessor, language); /* 536 */ 		listCodeArray[1] = "#end\n#end"; /* 537 */ 	} /* 538 */ 	return listCodeArray; /* 540 */ } /* 541 */ private String _getPaletteItemTitle(HttpServletRequest request, String label, Class<?> clazz) { /* 543 */ 	StringBundler sb = new StringBundler(10); /* 544 */ 	if (clazz == null) { /* 546 */ 		return StringPool.BLANK; /* 547 */ 	} /* 548 */ 	String className = clazz.getName(); /* 550 */ 	sb.append("<br />"); /* 552 */ 	sb.append(LanguageUtil.get(request, label)); /* 553 */ 	sb.append(StringPool.COLON); /* 554 */ 	sb.append("&nbsp;"); /* 555 */ 	String javadocURL = null; /* 557 */ 	if (className.startsWith("com.liferay")) { /* 559 */ 		javadocURL = "http:  docs.liferay.com/portal/6.2/javadocs/"; /* 560 */ 	} /* 561 */ 	if (Validator.isNotNull(javadocURL)) { /* 563 */ 		sb.append("<a href=\""); /* 564 */ 		sb.append(javadocURL); /* 565 */ 		sb.append(StringUtil.replace(className, StringPool.PERIOD, StringPool.SLASH)); /* 566 */ 		sb.append(".html\" target=\"_blank\">"); /* 567 */ 	} /* 568 */ 	sb.append(clazz.getSimpleName()); /* 570 */ 	if (Validator.isNull(javadocURL)) { /* 572 */ 		sb.append("</a>"); /* 573 */ 	} /* 574 */ 	return sb.toString(); /* 576 */ } /* 577 */ private String _getPaletteItemTitle(HttpServletRequest request, TemplateVariableDefinition templateVariableDefinition) { /* 579 */ 	StringBundler sb = new StringBundler(12); /* 580 */ 	String help = templateVariableDefinition.getHelp(); /* 582 */ 	if (Validator.isNotNull(help)) { /* 584 */ 		sb.append("<p>"); /* 585 */ 		sb.append(LanguageUtil.get(request, help)); /* 586 */ 		sb.append("</p>"); /* 587 */ 	} /* 588 */ 	if (templateVariableDefinition.isCollection()) { /* 590 */ 		sb.append("<p><i>*"); /* 591 */ 		sb.append(LanguageUtil.get(request, "this-is-a-collection-of-fields")); /* 592 */ 		sb.append("</i></p>"); /* 593 */ 	} /* 594 */ 	else if (templateVariableDefinition.isRepeatable()) { /* 595 */ 		sb.append("<p><i>*"); /* 596 */ 		sb.append(LanguageUtil.get(request, "this-is-a-repeatable-field")); /* 597 */ 		sb.append("</i></p>"); /* 598 */ 	} /* 599 */ 	if (!Validator.equals(templateVariableDefinition.getDataType(), "service-locator")) { /* 601 */ 		sb.append(LanguageUtil.get(request, "variable")); /* 602 */ 		sb.append(StringPool.COLON); /* 603 */ 		sb.append("&nbsp;"); /* 604 */ 		sb.append(templateVariableDefinition.getName()); /* 605 */ 	} /* 606 */ 	sb.append(_getPaletteItemTitle(request, "class", templateVariableDefinition.getClazz())); /* 608 */ 	if (templateVariableDefinition.isCollection()) { /* 610 */ 		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition(); /* 611 */ 		sb.append(_getPaletteItemTitle(request, "items-class", itemTemplateVariableDefinition.getClazz())); /* 613 */ 	} /* 614 */ 	return sb.toString(); /* 616 */ } /* 617 */ private String _getVariableAssignmentCode(String variableName, String variableValue, String language) { /* 619 */ 	if (StringUtil.equalsIgnoreCase(language, "ftl")) { /* 620 */ 		return "<#assign " + variableName + " = " + variableValue + ">"; /* 621 */ 	} /* 622 */ 	else if (StringUtil.equalsIgnoreCase(language, "vm")) { /* 623 */ 		if (!variableValue.startsWith(StringPool.DOUBLE_QUOTE) && !variableValue.startsWith(StringPool.OPEN_BRACKET) && !variableValue.startsWith(StringPool.OPEN_CURLY_BRACE) && !variableValue.startsWith(StringPool.QUOTE) && !Validator.isNumber(variableValue)) { /* 624 */ 			variableValue = StringPool.DOLLAR + variableValue; /* 625 */ 		} /* 626 */ 		return "#set ($" + variableName + " = " + variableValue + ")"; /* 628 */ 	} /* 629 */ 	return variableName; /* 631 */ } /* 632 */ private String _getVariableReferenceCode(String variableName, String accessor, String language) { /* 634 */ 	String methodInvocation = StringPool.BLANK; /* 635 */ 	if (Validator.isNotNull(accessor)) { /* 637 */ 		methodInvocation = StringPool.PERIOD + _getAccessor(accessor, language); /* 638 */ 	} /* 639 */ 	if (StringUtil.equalsIgnoreCase(language, "ftl")) { /* 641 */ 		return "${" + variableName + methodInvocation + "}"; /* 642 */ 	} /* 643 */ 	else if (StringUtil.equalsIgnoreCase(language, "vm")) { /* 644 */ 		return "$" + variableName + methodInvocation; /* 645 */ 	} /* 646 */ 	return variableName; /* 648 */ } /* 649 */ private static Log _log = LogFactoryUtil.getLog("portal-web.docroot.html.portlet.dynamic_data_mapping.edit_template_display_jspf"); /* 653 */  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();















     
     String scriptContent = ParamUtil.getString(request, "scriptContent");
     
     if (Validator.isNotNull(scriptContent)) {
     	script = scriptContent;
     }
     



response.write( false )+response.write(request.getAttribute(" false "));response.write( true )+response.write(request.getAttribute(" true "));
  response.write( true )+response.write(request.getAttribute(" true "));response.write( false )+response.write(request.getAttribute(" false "));response.write( true )+response.write(request.getAttribute(" true "));










    
     							long templateHandlerClassNameId = ddmDisplay.getTemplateHandlerClassNameId(template, classNameId);
     
     							Map<String, TemplateVariableGroup> templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(templateHandlerClassNameId, classPK, language, locale);
     
     							for (TemplateVariableGroup templateVariableGroup : templateVariableGroups.values()) {
     								if (templateVariableGroup.isEmpty()) {
     									continue;
     								}
     							

 response.write( true )+response.write(request.getAttribute(" true "));response.write( false )+response.write(request.getAttribute(" false "));response.write( templateVariableGroup.getLabel() )+response.write(request.getAttribute(" templateVariableGroup").getLabel() );response.write( templateVariableGroup.getLabel() )+response.write(request.getAttribute(" templateVariableGroup").getLabel() );


       
     										for (TemplateVariableDefinition templateVariableDefinition : templateVariableGroup.getTemplateVariableDefinitions()) {
     											String[] dataContentArray = _getDataContentArray(templateVariableDefinition, language);
     										


response.write( HtmlUtil.escapeAttribute(dataContentArray[0]) )+response.write(request.getAttribute(" HtmlUtil").escapeAttribute(dataContentArray[0]) );response.write( HtmlUtil.escapeAttribute(dataContentArray[1]) )+response.write(request.getAttribute(" HtmlUtil").escapeAttribute(dataContentArray[1]) );response.write( HtmlUtil.escapeAttribute(dataContentArray[2]) )+response.write(request.getAttribute(" HtmlUtil").escapeAttribute(dataContentArray[2]) );response.write( HtmlUtil.escapeAttribute(_getPaletteItemTitle(request, templateVariableDefinition)) )+response.write(request.getAttribute(" HtmlUtil").escapeAttribute(_getPaletteItemTitle(request, templateVariableDefinition)) );
response.write( templateVariableDefinition.getLabel() )+response.write(request.getAttribute(" templateVariableDefinition").getLabel() );



       
     										}
     										




    
     							}
     							







     			String editorContainerClass = "lfr-editor-container";
     
     			if (!DDMTemplateHelperUtil.isAutocompleteEnabled(language)) {
     				editorContainerClass += " lfr-editor-container-full";
     			}
     			

      response.write(editorContainerClass)+response.write(request.getAttribute("editorContainerClass"));




















































































 response.write( UnicodeLanguageUtil.get(request, "there-are-no-results") );






















































































































































  response.write( DDMTemplateHelperUtil.getAutocompleteJSON(request, language) );






















      
     	String langType = ParamUtil.getString(request, "langType");
     	












      response.write( EditorUtil.getEditorMode(langType) );
}

}
