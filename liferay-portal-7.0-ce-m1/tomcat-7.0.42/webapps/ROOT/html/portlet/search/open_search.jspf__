 package PackageNo55527906; public class open_search_jspf {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();



















     
     LinkedHashMap<String, Object> groupParams = new LinkedHashMap<String, Object>();
     
     groupParams.put("active", Boolean.FALSE);
     
     int inactiveGroupsCount = GroupLocalServiceUtil.searchCount(themeDisplay.getCompanyId(), null, null, groupParams);
     
     List<Portlet> portlets = PortletLocalServiceUtil.getPortlets(company.getCompanyId(), includeSystemPortlets, false);
     
     portlets = ListUtil.sort(portlets, new PortletTitleComparator(application, locale));
     
     Iterator<Portlet> itr = portlets.iterator();
     
     while (itr.hasNext()) {
     	Portlet portlet = itr.next();
     
     	if (Validator.isNull(portlet.getOpenSearchClass())) {
     		itr.remove();
     
     		continue;
     	}
     	else {
     		try {
     			ClassLoader classLoader = ClassLoaderUtil.getPortalClassLoader();
     
     			classLoader.loadClass(portlet.getOpenSearchClass());
     
     			itr.remove();
     
     			continue;
     		}
     		catch (ClassNotFoundException cnfe) {
     		}
     	}
     
     	OpenSearch openSearch = portlet.getOpenSearchInstance();
     
     	if (!openSearch.isEnabled()) {
     		itr.remove();
     
     		continue;
     	}
     
     	portletTitles.add(PortalUtil.getPortletTitle(portlet, application, locale));
     }
     
     if (Validator.isNotNull(primarySearch)) {
     	for (int i = 0; i < portlets.size(); i++) {
     		Portlet portlet = (Portlet)portlets.get(i);
     
     		if (primarySearch.equals(portlet.getOpenSearchClass())) {
     			if (i != 0) {
     				portlets.remove(i);
     
     				portlets.add(0, portlet);
     			}
     
     			break;
     		}
     	}
     }
     







   response.write( StringUtil.merge(portletTitles, StringPool.COMMA_AND_SPACE) )+response.write(request.getAttribute(" StringUtil").merge(portletTitles, StringPool.COMMA_AND_SPACE) );




     
     int totalResults = 0;
     
     for (int i = 0; i < portlets.size(); i++) {
     	Portlet portlet = (Portlet)portlets.get(i);
     
     	OpenSearch openSearch = portlet.getOpenSearchInstance();
     
     	//List<String> headerNames = new ArrayList<String>();
     
     	//headerNames.add("#");
     	//headerNames.add("summary");
     	//headerNames.add("tags");
     	//headerNames.add("score");
     
     	SearchContainer openSearchSearchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM + i, 5, portletURL, null, LanguageUtil.format(request, "no-results-were-found-that-matched-the-keywords-x", "<strong>" + HtmlUtil.escape(keywords) + "</strong>", false));
     
     	if (Validator.isNotNull(primarySearch) && primarySearch.equals(portlet.getOpenSearchClass())) {
     		int delta = ParamUtil.getInteger(request, SearchContainer.DEFAULT_DELTA_PARAM + i);
     
     		if (delta > 0) {
     			openSearchSearchContainer.setDelta(delta);
     		}
     		else {
     			openSearchSearchContainer.setDelta(SearchContainer.DEFAULT_DELTA);
     		}
     	}
     
     	String portletTitle = PortalUtil.getPortletTitle(portlet, application, locale);
     
     	boolean filterSearch = false;
     
     	if (openSearch instanceof HitsOpenSearchImpl) {
     		HitsOpenSearchImpl hitsOpenSearchImpl = (HitsOpenSearchImpl)openSearch;
     
     		Indexer hitsOpenSearchImplIndexer = hitsOpenSearchImpl.getIndexer();
     
     		filterSearch = hitsOpenSearchImplIndexer.isFilterSearch();
     	}
     
     	List resultRows = new ArrayList();
     
     	try {
     		String xml = openSearch.search(request, groupId, themeDisplay.getUserId(), keywords, openSearchSearchContainer.getCur(), openSearchSearchContainer.getDelta(), format);
     
     		xml = XMLFormatter.stripInvalidChars(xml);
     
     		com.liferay.portal.kernel.xml.Document document = SAXReaderUtil.read(xml);
     
     		Element rootElement = document.getRootElement();
     
     		//portletTitle = rootElement.elementText("title");
     
     		queryTerms = StringUtil.split(rootElement.elementText("queryTerms"), StringPool.COMMA_AND_SPACE);
     
     		List<Element> entries = rootElement.elements("entry");
     
     		int openSearchSearchContainerTotal = GetterUtil.getInteger(rootElement.elementText(OpenSearchUtil.getQName("totalResults", OpenSearchUtil.OS_NAMESPACE)));
     
     		resultRows = openSearchSearchContainer.getResultRows();
     
     		for (int j = 0; j < entries.size(); j++) {
     			try {
     				Element element = entries.get(j);
     
     				ResultRow row = new ResultRow(document, String.valueOf(j), j);
     
     				// Position
     
     				//row.addText(SearchEntry.DEFAULT_ALIGN, "top", openSearchSearchContainer.getStart() + j + 1 + StringPool.PERIOD);
     
     				// Summary
     
     				String entryClassName = element.elementText("entryClassName");
     				String entryTitle = element.elementText("title");
     				String entryHref = element.element("link").attributeValue("href");
     				String summary = element.elementText("summary");
     
     				// Group id
     
     				long entryScopeGroupId = GetterUtil.getLong(element.elementText(OpenSearchUtil.getQName("scopeGroupId", OpenSearchUtil.LIFERAY_NAMESPACE)));
     
     				if (Validator.isNotNull(entryScopeGroupId) && (inactiveGroupsCount > 0)) {
     					Group entryGroup = GroupServiceUtil.getGroup(entryScopeGroupId);
     
     					if (entryGroup.isLayout()) {
     						entryGroup = GroupLocalServiceUtil.getGroup(entryGroup.getParentGroupId());
     					}
     
     					if (!entryGroup.isActive()) {
     						openSearchSearchContainerTotal--;
     
     						continue;
     					}
     				}
     
     				String portletId = portlet.getPortletId();
     
     				if (portletId.equals(PortletKeys.DOCUMENT_LIBRARY) || (portletId.equals(PortletKeys.SEARCH) && entryClassName.equals(DLFileEntryConstants.getClassName()))) {
     					long fileEntryId = GetterUtil.getLong(HttpUtil.getParameter(entryHref, "_20_fileEntryId", false));
     
     					FileEntry fileEntry = DLAppLocalServiceUtil.getFileEntry(fileEntryId);
     
     					entryTitle = fileEntry.getTitle();
     
     					if (portletId.equals(PortletKeys.SEARCH)) {
     						entryTitle = PortalUtil.getPortletTitle(PortletKeys.DOCUMENT_LIBRARY, locale) + " " + CharPool.RAQUO + " " + entryTitle;
     					}
     
     					if (dlLinkToViewURL) {
     						long dlPlid = PortalUtil.getPlidFromPortletId(fileEntry.getRepositoryId(), PortletKeys.DOCUMENT_LIBRARY);
     
     						PortletURL viewURL = new PortletURLImpl(request, PortletKeys.DOCUMENT_LIBRARY, dlPlid, PortletRequest.RENDER_PHASE);
     
     						viewURL.setParameter("struts_action", "/document_library/view_file_entry");
     						viewURL.setParameter("redirect", currentURL);
     						viewURL.setParameter("fileEntryId", String.valueOf(fileEntry.getFileEntryId()));
     
     						entryHref = viewURL.toString();
     					}
     				}
     
     				StringBundler rowSB = new StringBundler();
     
     				rowSB.append("<a class=\"entry-title\" href=\"");
     				rowSB.append(entryHref);
     				rowSB.append("\">");
     				rowSB.append(SearchUtil.highlight(HtmlUtil.escape(entryTitle), queryTerms));
     				rowSB.append("</a>");
     
     				if (Validator.isNotNull(summary)) {
     					rowSB.append("<br />");
     					rowSB.append(SearchUtil.highlight(HtmlUtil.escape(summary), queryTerms));
     				}
     
     				rowSB.append("<br />");
     
     				// Tags
     
     				String tagsString = element.elementText("tags");
     
     				tagsString = tagsString.replaceAll("[\\[\\]]","");
     
     				String[] tags = StringUtil.split(tagsString);
     
     				String[] tagsQueryTerms = queryTerms;
     
     				if (StringUtil.startsWith(keywords, Field.ASSET_TAG_NAMES + StringPool.COLON)) {
     					tagsQueryTerms = new String[] {StringUtil.replace(keywords, Field.ASSET_TAG_NAMES + StringPool.COLON, StringPool.BLANK)};
     				}
     
     				for (int k = 0; k < tags.length; k++) {
     					String tag = tags[k];
     
     					String newKeywords = tag.trim();
     
     					if (newKeywords.matches(".+\\s.+")) {
     						newKeywords = StringPool.QUOTE + tag + StringPool.QUOTE;
     					}
     
     					PortletURL tagURL = PortletURLUtil.clone(portletURL, renderResponse);
     
     					tagURL.setParameter("keywords", Field.ASSET_TAG_NAMES + StringPool.COLON + newKeywords);
     					tagURL.setParameter("format", format);
     
     					if (k == 0) {
     						rowSB.append("<div class=\"entry-tags\">");
     						rowSB.append("<div class=\"taglib-asset-tags-summary\">");
     					}
     
     					rowSB.append("<a class=\"tag\" href=\"");
     					rowSB.append(tagURL.toString());
     					rowSB.append("\">");
     					rowSB.append(SearchUtil.highlight(tag, tagsQueryTerms));
     					rowSB.append("</a>");
     
     					if ((k + 1) == tags.length) {
     						rowSB.append("</div>");
     						rowSB.append("</div>");
     					}
     				}
     
     				row.addText(rowSB.toString());
     
     				// Ratings
     
     				//String ratings = element.elementText("ratings");
     
     				//row.addText(ratings);
     
     				// Score
     
     				//String score = element.elementText(OpenSearchUtil.getQName("score", OpenSearchUtil.RELEVANCE_NAMESPACE));
     
     				//row.addText(score);
     
     				// Add result row
     
     				resultRows.add(row);
     			}
     			catch (Exception e) {
     				_log.error("Error retrieving individual search result of type " + portlet.getOpenSearchClass(), e);
     
     				openSearchSearchContainerTotal--;
     			}
     		}
     
     		openSearchSearchContainer.setTotal(openSearchSearchContainerTotal);
     	}
     	catch (Exception e) {
     		_log.error("Error displaying content of type " + portlet.getOpenSearchClass(), e);
     	}
     



       
     		totalResults = totalResults + openSearchSearchContainer.getTotal();
     
     		StringBundler sb = new StringBundler(7);
     
     		sb.append(portletTitle);
     
     		// When the total is <= to the delta, we know the result is accurate
     		// since we've filtered the entire result set. Otherwise, we simply
     		// indicate that there are possibly many more. (� la Google)
     
     		if (filterSearch && (openSearchSearchContainer.getTotal() > openSearchSearchContainer.getDelta())) {
     			sb.append(StringPool.SPACE);
     			sb.append(StringPool.OPEN_PARENTHESIS);
     			sb.append(openSearchSearchContainer.getDelta());
     			sb.append(StringPool.SPACE);
     			sb.append(LanguageUtil.get(request, "of-many"));
     			sb.append(StringPool.CLOSE_PARENTHESIS);
     		}
     		else {
     			sb.append(StringPool.SPACE);
     			sb.append(StringPool.OPEN_PARENTHESIS);
     			sb.append(openSearchSearchContainer.getTotal());
     			sb.append(StringPool.CLOSE_PARENTHESIS);
     		}
     		


     response.write( sb.toString() );


  response.write( false )+response.write(request.getAttribute(" false "));response.write( openSearchSearchContainer );




     response.write( openSearchSearchContainer );






 response.write(String.getValueOf(groupId))+response.write(request.getAttribute("String").getValueOf(groupId));
 response.write(portlet.getOpenSearchClass());
 response.write(HtmlUtil.getEscape(keywords))+response.write(request.getAttribute("HtmlUtil").getEscape(keywords));
 response.write(format)+response.write(request.getAttribute("format"));


   response.write( LanguageUtil.format(request, "more-x-results", portletTitle, false) );





     
     }
     



    response.write( LanguageUtil.format(request, "no-results-were-found-that-matched-the-keywords-x", "<strong>" + HtmlUtil.escape(keywords) + "</strong>", false) );
}

}
